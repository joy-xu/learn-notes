插入：
    字符位置插入:
        i : 在光标之前插入(Insert 模式，按 ESC(或者<C-[>) 回到 Normal 模式)
        a : 在光标后插入
	行位置插入：
	    A : 在一行的结尾处追加
	    I : 在一行的开头处插入
	    o(小写字母o) : 在当前行后插入一个新行
	    O(大写字母O) : 在当前行前插入一个新行
	    cw : 替换从光标所在位置后到一个单词结尾的字符
        J : 合并两行(当前行和下一行)
		技巧：
	        10I*<Esc>先输入10,然后输入I，接着输入*号，最后按<Esc>,这样就可以在一行开头输入十个*
                5o###<Esc>先输入5,然后输入o，接着输入###，最后按<Esc>,这样就可以在下列5行中每一行开头插入###

普通模式：
   『操作符』+『动作命令』= 操作：d{motion} daw dap dl等，c{motion} caw cw等
    Vim的语法只有一条额外规则，即当一个『操作符』命令被连续调用两次时，它会作用于当前行：dd、>>、gUgU(缩写gUU)等
		
插入模式下:
    删除:
        <C-h> 删除光标前一个字符(同退格键)
        <C-w> 删除从光标开始往前到单词开头
        <C-u> 删至行首
    
	粘贴寄存器中的文本<C-r>{register}
	    <C-r>0 : 最近复制的文本粘贴到光标所在位置
    
	用 = 符号指明使用『表达式寄存器』(它可以用来执行一段Vim 脚本，并返回其结果):
	    <C-r>= : 可以访问表达式寄存器,这条命令会在屏幕的下方显示一个提示符，我们可以在其后输入要执行的表达式.
		      输入表达式后敲一下<CR>，Vim 就会把执行的结果插入到文档的当前位置了(<C-r>=6*35<CR>)
	
	使用字符编码插入非”常用”字符(把光标移到任意字符上面并输入ga命令,屏幕下方就会分别以十进制和十六进制的形式显示出其字符编码):
            <C-v>{123} : 以十进制字符编码插入字符(Ctrl+v123)
            <C-v>u{1234} : 以十六进制字符编码插入字符(Ctrl+vu00bf)
            <C-v>{nondigit} : 按原义插入非数字字符(Ctrl+vabc)
            <C-k>{char1}{char2} : 插入以二合字母{char1}{char2}表示的字符(Ctrl+k12:输入1/2， Ctrl+k <<：输入书名号«)
	
插入-普通模式: 插入-普通模式是普通模式的一个特例，它能让我们执行一次普遍模式命令,执行完后，马上就又返回到插入模式
	要从插入模式切换到插入-普通模式，可以按<C-o>。例如<C-o>zz

替换模式：R命令可以由普通模式进入替换模式，之后输入的每个字符将替换掉原来的字符(按字符替换)；r：单次版本的替换模式(覆盖一个字符后立马回到普通模式)

虚拟替换模式：gR命令可以由普通模式进入虚拟替换模式，之后输入的每个字符将替换掉原来的字符(按屏幕实际显示的宽度进行替换，比如tab占据屏幕8列宽，会将其当做8个空格进行处理)；gr：单次版本的替换模式(覆盖一个字符后立马回到普通模式)

可视模式:
    普通模式下，
	v激活面向字符的可视模式(再次按v回到普通模式); V激活面向行的可视模式(再次按V回到普通模式); <C-v> 激活面向列块的可视模式(再次按<C-v>回到普通模式); gv重选上次的高亮选区; 可视模式之间可以直接按v、V、<C-v>进行切换
	o :　切换高亮选区的活动端
    u(U): 小写(大写)选中的文本

选择模式:   <C-g>可以在可视模式及选择模式间切换，切换后不同的是屏幕下方的提示信息会在(-- VISUAL --)及(--SELECT—)间转换，如果在选择模式输入字符的话，会替换所选内容并进入插入模式；可视模式可以输入c键来修改内容

命令行模式(Ex命令影响范围广且距离远)：
	
	:[range]delete [x] : 删除指定范围[range]内的行(到寄存器x中)
	:[range]yank [x] : 复制指定范围的行
	:[range]copy {address}: 将指定范围内行拷贝到{address}所指定行之下(copy<==>co<==>t) copy To
	:[range]move {address}: 将指定范围内的行移动到{address}所指定行下(move<==>m)
	:[range]normal {commands}: 对指定范围内的每一行执行普通命令{commands}，在执行{commands}前，vim会先把光标移动到该行的起始处。:%normal i// : 把文件所有内容注释掉。可以结合使用:normal .完成重复性工作
		

	指定地址的方式: 1. 使用行号作为地址: 5, 6print(打印5到6行)、:6t.(将第6行复制到当前行下方) ；2. 用模式指定范围: /<html>/,/<\/html>/p(打印从<html>到</html>之间内容)、3. 使用偏移地址({address}+n)修正: /<html>/+1,/<\/html>-2/p
	地址以及范围符号总结：
	1	文件第一行
	$	文件最后一行
	0	虚拟行，位于文件第一行上方
	.	光标所在行
	‘m	包含位置标记m的行
	‘<	高亮选取起始行
	‘>	高亮选区结束行
	%	整个文件(:1,$缩写)
	
	:%normal A; : 在文件每行的结尾添加一个分号
	
	重复执行上次的Ex命令：@:即可。<Ctrl + d>命令让vim显示可用的补全列表，<Tab>键自动补全命令
	<C-r><C-w>复制光标下的单词并把它插入到命令行中(<C-r><C-a>插入光标下字串)。:%s/<C-r><C-w>/ok/gc : 将当前单词替换为ok
	
	命令行窗口：
		q/ : 打开查找命令历史的命令行窗口
		q: : 打开Ex命令历史的命令行窗口
		<C-f> : 从命令行模式切换到命令行窗口
	:!{cmd} : 在shell中执行{cmd}(:!ls -la)
	:shell : 启动一个shell，输入exit返回vim
	:read !{cmd} : 在shell中执行{cmd}，并把标准输出插入到光标下
	:[range]write !{cmd} : 在shell中执行{cmd}，以[range]作为其标准输入
	:[range]!{filter} : 使用外部{filter}过滤指定的[range](:2,$!sort -t’,’ -k2) 
	
	:w[rite] : 把缓冲区内容写入磁盘
	:e[dit]! : 把磁盘文件内容读入缓冲区(即回滚所做修改)
	:qa[all]! : 关闭所有窗口，摒弃修改而无需警告
	:wa[all]

	
光标移动：
    整行移动:
    0(数字0) : 到实际行行首; g0 : 到屏幕行行首
    ^(Shift+6) : 到实际行第一个不是blank字符的位置(所谓blank字符就是空格，tab，换行，回车等); g^ : 到屏幕行
    $(Shift+4) : 到实际行行尾; g$ : 到屏幕行行尾
    g_ : 到本行最后一个不是blank字符的位置
    + : 移动到下一行开头
    - : 移动到上一行开头

    f(F){char}: 行内向后(前)查找到指定字符，并跳转到字符所处的位置(3fa即移动到从当前光标起第三个a字符的位置)
	    当搜索指定字符时，可以使用;(分号)跳转到下一处--不管是t搜索还是f搜索; ,(逗号)可以用来反向跳转到上一处
    t(T){char} : 正向(反向)查找到指定字符，并跳转到这个字符的前(后)一个字符上(ctg: 修改到下一个”g”之间的内容) search till the specified character
    
    /pattern : 从当前位置正向搜索 pattern 的字符串(如果搜索出多个匹配，可按n键到下一个, N键到上一个)
    ?pattern : 从当前位置逆向搜索 pattern 的字符串(如果搜索出多个匹配，可按n键到下一个, N键到上一个)

    NG : 到第 N 行(注意命令中的G是大写的，另一般使用 :N 到第N行，如 :137 到第137行)
    N| : 移动到当前行的第N列
    gg: 到第一行
    G: 到最后一行

    按单词移动：
        如果单词是由默认方式，那么就用小写的e、w和b。默认上来说，一个单词由字母，数字和下划线组成(程序变量), 如果你认为单词是由blank字符分隔符，那么你需要使用大写的E、W和B(程序语句)
        w : 正向移动到下一个单词的开头(3w: 移动3个单词)
	b : 反向移动到当前单词/上一单词的开头
        e : 正向移动到当前单词/下一单词的结尾
	ge : 反向移动到上一单词的结尾
        % : 匹配括号移动，包括 (, {, [。(你需要把光标先移到括号上)
        * 和 #:  匹配光标当前所在的单词，移动光标到下一个(或上一个)匹配单词(*是下一个，#是上一个)
    
    滚屏：
        Ctrl+f : 往前滚动一整屏
        Ctrl+b : 往后滚动一整屏
        Ctrl+d : 往前滚动半屏
        Ctrl+u : 往后滚动半屏
        Ctrl+e : 往前滚动一行
        Ctrl+y : 往后滚动一行
	
	使用z调整光标:
         z<Enter> : 将光标所在行移动到屏幕顶端(500z<Enter>可以将第500行移动到屏幕顶端)
         z.(或者zz) : 将光标所在行移动到屏幕中间(500z.可以将第500行移动到屏幕中间)
         z- : 将光标所在行移动到屏幕底端(500z-可以将第500行移动到屏幕底端)
    
	在屏幕中移动：
	    H　: 移动到屏幕顶端的行
           M　: 移动到屏幕中央的行
　　　　     L　: 移动到屏幕底端的行　
           nH : 移动到屏幕顶端往下的第n行
           nL : 移动到屏幕顶端往上的第n行
		
删除:
    
	字符删除:
        x(小写x) : 删除光标所在处字符
        X(大写X) : 删除光标所在前字符
        J : 将上下两行合并(删除两行之间的换行符)
		
	单词删除: d{motion}
	 dl : 删除一个字符
	 dw : 删除到下一个单词开头(d2w :　删除两个, 2w是删除操作的motion; 2dw : 重复两次dw操作)
        de : 删除到本单词末尾
        dE : 删除到本单词末尾包括标点在内
        db : 删除到前一个单词
        dB : 删除到前一个单词包括标点在内
	 dt. : 删除当前位置到下一个句号之间的所有内容
	 D : 删除当前光标位置到本行末的所有内容(不会进入插入模式)
        daw : 删除光标位置的单词(delete a word)
        dap : 删除一个段落(delete a paragraph)
		
	行删除:
	 dd : 删除一整行
        d$ : 删除光标位置到本行结尾
        d0 : 删除光标位置到本行开头

替换:
    字符替换:
       r : 单个字符替换
	R : 连续替换
	~ : 更改大小写(4～更改连续4个字符的大小写)
	gu{motion} : Make {motion} text lowercase(guap : 把整段文字转换为小写形式)
	    guu(或gugu) : 当前行小写
           guaw : 当前单词小写
	gU{motion} : Make {motion} text uppercase(gUaw : 把当前单词转换成大写形式)
	    gUU(或gUgU) : 当前行大写
            gUap : 当前段落大写
	g~{motion} : Switch case of {motion} text
	g~~(或g~g~) : 当前行大小写转换

    单词修改c{motion}:
	cw : 从光标处修改到单词结尾(此时2cw 或者 c2w都可以使用，功能一样), 并进入插入模式
	cb : 从光标处修改到单词开头，并进入插入模式

    行修改:
	c{motion}：修改文本{一个单词，一句或者一个段落}
        c$ :　从光标修改到本行末尾
        C　: 能同上(修改当前所在行) <==> c$
        c0 : 从光标修改到本行开头
        cc : 删除整行从头修改
        S : 功能同上(替换整行) <==>^C
        s : 删除光标所在位置的字符，然后插入(替换当前字符) <==>cl
	ct? : 修改问号前的这条问句内容

        :s : 命令模式下，:s/old/new，将光标所在行的第一个old替换为new。:s/old/new/g， 替换全行的匹配串。:%s/old/new/g替换整个文件中的old为new。 :#,#s/old/new/g，替换两行中间的每个匹配串
        在一行內替換頭一個字符串 old 為新的字符串 new，請輸入  :s/old/new
        在一行內替換所有的字符串 old 為新的字符串 new，請輸入  :s/old/new/g
        在兩行內替換所有的字符串 old 為新的字符串 new，請輸入  :#,#s/old/new/g
        在文件內替換所有的字符串 old 為新的字符串 new，請輸入  :%s/old/new/g
        進行全文替換時詢問用戶確認每個替換需添加 c 選項，請輸入 :%s/old/new/gc
		
拷贝粘贴:
    粘贴:
        p(小写p) : 在当前位置之后粘贴
        P(大写P) : 在当前位置之前粘贴
    复制:
	单词和字符复制y{motion}:
	     ynl : 向右复制n个字符
          ynh : 向左赋值n个字符
	     ynw : 向前复制ｎ个单词
          ynb : 向后复制n个单词
	     ye : 从当前位置拷贝到本单词的最后一个字符
		yt,  :  从当前位置复制到下一个逗号

	行复制:
	    yy : 拷贝当前行，相当于 ddP( 4yy也就是复制4行)
	    y$ : 复制到行末
	    y0 : 复制到行首
	    yH : 从当前行复制到屏幕顶端
	    yL : 从当前行复制到屏幕低端
Undo/Redo：
    u : 撤消上次命令(undo, 如果在插入模式中使用了<Up>、<Down>、<Left>、<Right>这些光标键，将会产生个新的撤销块，这也会对.命令的操作产生影响)
    U : 恢复整行(撤销在一行中所做的改动，恢复本行内容)
    Ctrl+r : 恢复整行(redo，撤销掉以前的”撤销命令”)
    . : 重复
    :e! : 全文恢复(只要你还没使用过w、wp或x保存)
	
打开/保存/退出/改变文件:
       :e <path/to/file> : 打开一个文件
	:w : 存盘(:w fileName, 保存到fileName文件)
	:saveas <path/to/file> : 另存为 <path/to/file>
	:q! : 退出不保存 
	:qa! : 强行退出所有的正在编辑的文件，就算别的文件有更改
	:x， ZZ 或 :wq : 保存并退出(:x 表示仅在需要时保存，ZZ不需要输入冒号并回车)
	
重复：
    .(小数点) : (小数点)可以重复上一次的命令
	    从进入插入模式的那一刻起(例如，输入 i)，直到返回普通模式时为止(输入<Esc>)，Vim 会记录每一个按键操作。做出这样一个修改后再用 . 命令的话，它将会重新执行所有这些按键操作
    N<command> : 重复某个命令N次(2dd → 删除2行,3p → 粘贴文本3次, 100idesu [ESC] -> 重复插入100次desu)
	
x: 删当前光标所在的一个字符
dd: 删除当前行，并把删除的行存到剪贴板里
p: 粘贴剪贴板
hjkl: 分别对应使用光标键 (←↓↑→)，j和k根据实际行向下及向上移动，gj和gk根据屏幕行向下及向上移动
:help <command> :显示相关命令的帮助
v: 可视化模式
>G : 增加从当前行到文档末尾处的缩进层级
K : 查看处于光标之下的那个单词的手册页

Ctrl + a : 对数字执行加操作(把当前光标之上或之后的数值加上[count])(180Ctrl+a : 在当前行正向查找一个数字，如果找到了，它就径直跳到那里，并加180)
Ctrl + x : 对数字执行减操作(把当前光标之上或之后的数值减去[count])(Vim 默认把以0开头的数字解释为八进制值，而不是十进制, 可以使用 set nrformats= 将Vim把所有数字都当成十进制(可以加入到vimrc文件中) )

Ctrl-g : 用于顯示當前光標所在位置和文件狀態信息

>> : 当前行增加缩进
<< : 当前行减小缩进
== : 当前行自动缩进

在 VIM 內執行外部命令的方法:
	** 輸入 :! 然後緊隨著輸入一個外部命令可以執行該外部命令。**

** 要保存文件的部分內容，請輸入 :#,# w FILENAME **（#代表行号）
** 要向當前文件中插入另外的文件的內容，請輸入 :r FILENAME **

it: 作为{motion}, 表示inside the tag，比如vit表示选中标签内的文本<h1>Hello World</h1>将选中Hello World, gUit表示将标签内文本大写化

Ctrl+o: 回到您之前的位置.
Ctrl+i: 跳转到较新的位置.

文本对象：基于结构定义的文本区域, 『分隔符文本对象』+『范围文本对象』
	『分隔符文本对象』:
	a) : 一对圆括号(parentheses)，内部文本+圆括号 around
	i) : 圆括号内部,只包含括号内部文本 inside
	a} : 一对花括号{braces}
	i} : 花括号内部
	a] (i]) : 方括号 ; a> (i>) : 尖括号 ; a’ (i’) : 单引号 ; a” (i”) : 双引号 ; a`(i`) : 反引号
	at (it) : xml标签(inside the tag)
	『范围文本对象』,一般来说, d{motion}命令和aw/as/ap配合使用比较好, 而c{motion}命令和iw/is/ip配合使用比较好
	iw : 当前单词
	aw : 当前单词及一个空格
	iW : 当前字串
	aW : 当前字串及一个空格
	is : 当前句子
	as : 当前句子及一个空格
	ip : 当前段落
	ap : 当前段落及一个空格
	